/**Rishant Rokaha
 * Professor Vohra
 * Data Structures and Algorithms
 * 28 November 2020
 * Assignment 10
 */
package rrokaha;

public class LinkedList<T> implements ListInterface<T> {
    private Node<T> firstNode;
    private int numberOfEntries;



    public LinkedList() {
        this.firstNode = null;
        this.numberOfEntries = 0;
    }


    public LinkedList(T[] items)  {
        for (int i=1; i<items.length+1; i++){
            add(items[i-1]);
        }
    }


    private  Node getNodeAt( int givenPosition) {
        Node currentNode = firstNode;

        for (int counter = 1; counter < givenPosition; counter++) {
            currentNode =  currentNode.getNext();

        }
        return currentNode;
    }

    @Override
    public void add(T newEntry){
        Node<T> newNode = new Node(newEntry);
        if(isEmpty())
            firstNode = newNode;
        else{
            Node<T> lastNode = getNodeAt(numberOfEntries);
            lastNode.setNext(newNode);
        }
        numberOfEntries++;
    }

    @Override
    public void add(int givenPosition, T newEntry) {
        if((givenPosition>=1)&& (givenPosition<=numberOfEntries+1)){
            Node<T> newNode = new Node<>(newEntry);

            if(givenPosition ==1){
                newNode.setNext(firstNode);
                firstNode=newNode;
                }
            else{
                Node<T> nodeBefore = getNodeAt(givenPosition-1);
                Node<T> nodeAfter = nodeBefore.getNext();
                newNode.setNext(nodeAfter);
                nodeBefore.setNext(newNode);
            }
            numberOfEntries++;

        }else
        {
            throw new IndexOutOfBoundsException("Illegal position given");
        }


    }

    @Override
    public T remove(int givenPosition) {
        T result = null;
        if ((givenPosition >= 1) && (givenPosition <= numberOfEntries)) {
            assert !isEmpty();
            if (givenPosition == 1) {
                result = firstNode.getData();
                firstNode = firstNode.getNext();
            }
            else{
                Node<T> nodeBefore = getNodeAt(givenPosition-1);
                Node<T> nodeToRemove = nodeBefore.getNext();
                Node<T> nodeAfter = nodeToRemove.getNext();
                result = nodeToRemove.getData();
                nodeBefore.setNext(nodeAfter);
            }
            numberOfEntries--;
            return  result;}
        else{
            throw new IndexOutOfBoundsException("Illegal position given");
        }
    }

    @Override
    public void clear() {
        firstNode = null;
        numberOfEntries = 0;

    }

    @Override
    public boolean replace(int givenPosition, T newEntry) {
        boolean isSuccessful = true;
        if ((givenPosition >= 1) && (givenPosition <= numberOfEntries)) {
            assert !isEmpty();
            Node desiredNode = getNodeAt(givenPosition); desiredNode.setData(newEntry);
        }
        else
            isSuccessful = false;
        return isSuccessful;
    }


    @Override
    public T getEntry(int givenPosition) {
        T result = null;
        if ((givenPosition >= 1) && (givenPosition <= numberOfEntries)) {
            assert !isEmpty();
            result = (T) getNodeAt(givenPosition).getData();
        }
        return result;
    }

    @Override
    public T[] toArray(){
       T[] result = (T[])new Object[numberOfEntries];

       int index = 0;
       Node<T> currentNode = firstNode;

       while((index<numberOfEntries)&& (currentNode!= null)){
           result[index] =  currentNode.getData();
           currentNode = currentNode.getNext();
           index++;

       }
       return result;

    }

    @Override
    public boolean contains(T anEntry) {
        boolean found = false;
        Node currentNode = firstNode;
        while (!found && (currentNode != null)) {
            if (anEntry.equals(currentNode.getData())) found = true;
            else
                currentNode = currentNode.getNext();
        }
        return found;
    }


    @Override
    public int getLength() {
        return numberOfEntries;
    }


    @Override
    public boolean isEmpty() {
        if(numberOfEntries==0)
            return true;
        else
            return false;
    }


    @Override
    public int getPosition(T anObject) {
        Node<T> tempNode= firstNode;
        for(int i = 1; i<= numberOfEntries; i++){
            if((tempNode.getData()).equals(anObject) && tempNode!=null)
                return i;
            else
                tempNode = tempNode.getNext();
        }
        return 0;
    }



    public void addAll(T[] items) {
        for (int i = 0; i < items.length; i++) {
            add(items[i]);
        }
    }


}


